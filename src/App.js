import React, { useState, useEffect } from 'react';
import './App.css';
import Card from './Card';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const generateCards = (level) => {
  const cardValues = ['üçé', 'üçå', 'üçâ', 'üçì', 'üçç', 'ü•ù', 'üçá', 'üçí', 'ü••', 'üçã', 'üçä', 'üçì', 'üçè', 'üçë', 'üçç', 'üçí', 'üçì', 'ü•≠', 'üçá', 'üçè', 'üçâ', 'üçã', 'üçë', 'üçä', 'üçé', 'üçå', 'üçâ', 'üçì', 'üçç', 'ü•ù', 'üçá', 'üçí', 'ü••', 'üçã', 'üçä', 'üçì', 'üçè', 'üçë', 'üçç', 'üçí', 'üçì', 'ü•≠', 'üçá', 'üçè', 'üçâ', 'üçã', 'üçë', 'üçä'];
  
  let numPairs = 0;
  if (level === 20) {
    numPairs = 10; // 20 –∫–∞—Ä—Ç–æ—á–µ–∫ = 10 –ø–∞—Ä
  } else if (level === 40) {
    numPairs = 20; // 40 –∫–∞—Ä—Ç–æ—á–µ–∫ = 20 –ø–∞—Ä
  } else if (level === 60) {
    numPairs = 30; // 60 –∫–∞—Ä—Ç–æ—á–µ–∫ = 30 –ø–∞—Ä
  }
  
  const cards = cardValues.slice(0, numPairs); // –û–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä
  return [...cards, ...cards].sort(() => Math.random() - 0.5); // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
};

const App = () => {
  const [level, setLevel] = useState(20); // –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (20 –∫–∞—Ä—Ç)
  const [cards, setCards] = useState(generateCards(20)); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
  const [flippedCards, setFlippedCards] = useState([]);
  const [matchedCards, setMatchedCards] = useState([]);
  const [moves, setMoves] = useState(0);
  const [score, setScore] = useState(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
  useEffect(() => {
    if (matchedCards.length === cards.length) {
      alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –∑–∞ ${moves} —Ö–æ–¥–æ–≤ –∏ –Ω–∞–±—Ä–∞–ª–∏ ${score} –±–∞–ª–ª–æ–≤!`);
    }
  }, [matchedCards, cards, moves, score]);

  const flipCard = (index) => {
    if (
      flippedCards.length < 2 && // –ù–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –∫–∞—Ä—Ç
      !flippedCards.includes(index) && // –ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞
      !matchedCards.includes(cards[index]) // –ö–∞—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞
    ) {
      setFlippedCards((prevFlipped) => [...prevFlipped, index]);
    }
  };

  useEffect(() => {
    if (flippedCards.length === 2) {
      setMoves((prevMoves) => prevMoves + 1);
      const [firstIndex, secondIndex] = flippedCards;

      if (cards[firstIndex] === cards[secondIndex]) {
        setMatchedCards((prevMatched) => [...prevMatched, cards[firstIndex]]);
        setScore((prevScore) => prevScore + 10);
        setFlippedCards([]);
      } else {
        setScore((prevScore) => prevScore - 2);
        setTimeout(() => setFlippedCards([]), 1000);
      }
    }
  }, [flippedCards, cards, matchedCards]);

  const handleLevelChange = (newLevel) => {
    setLevel(newLevel);
    setCards(generateCards(newLevel)); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    setFlippedCards([]);
    setMatchedCards([]);
    setMoves(0);
    setScore(0);
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const levelClass = level === 20 ? '' : level === 40 ? 'medium' : 'hard';

  return (
    <div className={`App ${levelClass}`}>
      <h1>–ò–≥—Ä–∞ "–ü–∞–º—è—Ç—å"</h1>
      <div className="controls">
        <button onClick={() => handleLevelChange(20)} className={level === 20 ? 'active' : ''}>–õ–µ–≥–∫–∏–π</button>
        <button onClick={() => handleLevelChange(40)} className={level === 40 ? 'active' : ''}>–°—Ä–µ–¥–Ω–∏–π</button>
        <button onClick={() => handleLevelChange(60)} className={level === 60 ? 'active' : ''}>–°–ª–æ–∂–Ω—ã–π</button>
      </div>
      <p>–•–æ–¥–æ–≤: {moves}</p>
      <p>–ë–∞–ª–ª—ã: {score}</p>
      <div className="board">
        {cards.map((value, index) => (
          <Card
            key={index}
            index={index}
            value={value}
            isFlipped={flippedCards.includes(index) || matchedCards.includes(value)}
            onClick={flipCard}
          />
        ))}
      </div>
    </div>
  );
};

export default App;
